# Global variables
export STS_ENV_HOME="${STS_ENV_HOME:-$HOME/env}"
export STS_KNOWLEDGE_HOME="${STS_KNOWLEDGE_HOME:-$HOME/knowledge}"
export STS_VMS_HOME="${STS_VMS_HOME:-$HOME/vms}"
export STS_SERVICES_HOME="${STS_SERVICES_HOME:-$HOME/services}"
export STS_OSS_HOME="${STS_OSS_HOME:-$HOME/oss}"
export STS_OPT_HOME="${STS_OPT_HOME:-$HOME/opt}"
export STS_SANDBOX_HOME="${STS_SANDBOX_HOME:-$HOME/sandbox}"
export STS_WORKSPACE_HOME="${STS_WORKSPACE_HOME:-$HOME/workspace}"

# Convenience path variables

# Usage: load_library LIBRARY_NAME
#   This will autoload all functions in the folder
#   $STS_ENV_LIBRARIES/$LIBRARY_PATH, unless $STS_LIB_DISABLE_[LIBRARY_PATH]
#   has been set.
load_library() {

  # Check to see if the library directory exists
  local lib_path="$1"
  if [[ ! -d "$lib_path" ]]; then
    echo "$lib_path does not exist"
    return 1
  fi

  # Check if the library has been disabled from loading
  local override_var_name="STS_LIB_DISABLE_${lib_path:t:r}"
  local override_var_value=$(eval echo \$$override_var_name)
  if [[ -n $override_var_value ]]; then
    echo "Skipped autoloading functions from $lib_path. $override_var_name is set"
    return 1
  fi

  # So globbing doesn't throw errors for empty directories, which stops
  # zsh from running
  setopt localoptions nullglob

  # Update fpath and autoload all the zsh scripts in the provided directory
  fpath=("$lib_path" $fpath)
  for file in "$lib_path"/*; do
    autoload -Uz "${file:t:r}"
  done
}

# Load all libraries. Order doesn't matter here.
load_all_libraries() {
  local STS_ENV_LIBRARIES="$STS_ENV_HOME/libraries"
  for dir in "$STS_ENV_LIBRARIES"/*; do
    load_library "$dir"
  done
}

# load all libraries
load_all_libraries

# load application specific environments
load_app_env_configs
